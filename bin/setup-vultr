#!/usr/bin/env bash
# .sh/bin/create-vultr 20180619 - 20180621
# Copyright (C) 1995-2018 Mark Constable <markc@renta.net> (AGPL-3.0)

# First obtain your API key from your account section at https://my.vultr.common
# Add "export VULTR_API_KEY=YOUR_API_KEY" to ~/.myrc (use the es alias)

[[ -z $VULTR_API_KEY ]] && echo "ERROR: missing or empty VULTR_API_KEY" && exit 1

# Then register your startup script and sshkey before going any further.
# Add the below snippet between the dashes (remove the initial #) as a
# Startup Script. Use "vultr scripts" to get the SCRIPTID, add to VARG5.
#
#------------------------------------------------
##!/bin/sh
#export HOME=/root
#sleep 15
#cd
#git clone -q https://github.com/netserva/sh .sh
#.sh/bin/shm install > /dev/null
#source .shrc
#shm perms
#export MAILTO=YOUR_NOTIFICATION_EMAIL_ADDRESS
#setup-all
#------------------------------------------------
#
# Use "ssh-keygen -f ~/.ssh/vultr -N ''" and add ~/.ssh/vultr.pub to your
# Vultr account, then use "vultr sshkeys" to get the SSHKEYID, add to VARG2.
# Make sure your local private SSH key matches the public SSH key at Vultr.

MYKEY="$HOME/.ssh/vultr"

# After about 10 minutes you should be able to use this to acces the server
# ssh -p9 -i ~/.ssh/YOUR_SSHKEY root@YOUR_NEW_FQDN_HOSTNAME (or IP)
#
# This is a very handy alias, add it to ~/.myrc (use "es")
# alias lv='vultr servers | awk "{printf \"%-8s %-32s %-16s\n\", \$1, \$4, \$3}"'

if [[ ! -f /usr/local/bin/vultr ]]; then
    cd /tmp
    wget -q https://github.com/JamesClonk/vultr/releases/download/1.15.0/vultr_1.15.0_Linux-64bit.tar.gz
    tar xf vultr_1.15.0_Linux-64bit.tar.gz
    sudo mv vultr /usr/local/bin/vultr
    echo "+++ Looks like a first time setup, get you API key and setup SCRIPTID/SSHKEYID at https://my.vultr.com"
    exit 2
fi

# -n  Name of new virtual machine
# -r  Region (DCID)                          19  = Sydney
# -p  Plan (VPSPLANID)                       201 = 1GB Ram
# -k  SSH key to apply (SSHKEYID)
# -s  Script to execute on boot (SCRIPTID)
# -o  Operating system (OSID)                270 = Ubuntu 18.04
# --hostname=host.domain.name (same as -n)

[[ -z $1 || $1 =~ -h ]] && \
    echo "Usage: create-vultr hostname.domain.name [regionid] [planid] [sshkeyid] [scriptid] [osid]" && exit 1

VHOST=$1
# Change these defaults below for your preferred plan and region etc
VARG2=${2:-'19'}
VARG3=${3:-'201'}
VARG4=${4:-'5951b68883517'}
VARG5=${5:-'69340'}
VARG6=${6:-'270'}

HNAME=${VHOST%%.*} # hostname
DNAME=${VHOST#*.*} # domain.name
LECFG="$HOME/.dehydrated"
DOSSH="ssh -l root -p9 -i $MYKEY -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
C_SSL='/etc/ssl'
C_WEB='/etc/nginx'
NS1IP='173.199.96.96'
NS2IP='173.199.96.97'

vultr servers | grep -q $VHOST
[[ $? -eq 0 ]] && echo "ERROR: $VHOST already exists" && exit 4

echo "+++ Create server instance for $VHOST"
vultr server create -n $VHOST -r $VARG2 -p $VARG3 -k $VARG4 -s $VARG5 -o $VARG6 --hostname=$VHOST --notify-activate=false > /dev/null 2>&1

echo "+++ Wait 15 seconds for server to become active"
sleep 15

VULTR=($(vultr servers | awk '/'$VHOST'/ {printf $1" "$3}'))
SUBID=${VULTR[0]}
IP4_0=${VULTR[1]}
echo "+++ Server IP is $IP4_0 and SUBID is $SUBID"

vultr dns domain list | grep -q $DNAME
if [[ $? -eq 0 ]];then
    echo "+++ Delete old DNS records for $DNAME"
    vultr dns domain delete -d $DNAME
fi

echo "+++ Reset nameserver records for $DNAME to ns1/ns2.vultr.com"
swchangens $DNAME ns1.vultr.com ns2.vultr.com

echo "+++ Add DNS records for $DNAME"
vultr dns domain create -d $DNAME -s $IP4_0 > /dev/null 2>&1
swchangens $DNAME ns1.vultr.com ns2.vultr.com
RECID=$(vultr dns record list -d $DNAME | awk '/CNAME/ {print $1}')
vultr dns record delete -d $DNAME -r $RECID > /dev/null 2>&1
vultr dns record create -d $DNAME -n ns1 -t A -D $NS1IP > /dev/null 2>&1
vultr dns record create -d $DNAME -n ns2 -t A -D $NS2IP > /dev/null 2>&1
vultr dns record create -d $DNAME -n www -t A -D $IP4_0 > /dev/null 2>&1
vultr dns record create -d $DNAME -n $HNAME -t A -D $IP4_0 > /dev/null 2>&1
vultr dns record create -d $DNAME -n $DNAME -t TXT -D "\"v=spf1 ip4:$IP4_0/32 -all\"" > /dev/null 2>&1
vultr dns record create -d $DNAME -n _dmarc -t TXT -D "\"v=DMARC1; p=none; pct=100; rua=mailto:dmarc@renta.net; ruf=mailto:dmarc@renta.net; sp=none; aspf=r;\"" > /dev/null 2>&1

vultr dns record create -d $DNAME -n mail -t A -D $IP4_0 > /dev/null 2>&1
RECID=$(vultr dns record list -d $DNAME | awk '/MX/ {print $1}')
vultr dns record update -d $DNAME -r $RECID -D mail.$DNAME > /dev/null 2>&1
vultr server reverse-dns set-ipv4 $SUBID $IP4_0 mail.$DNAME > /dev/null 2>&1

# 5 mins should be enough but sometimes the *buntu repos can be slow
echo "+++ Wait 15 mins until NetServa packages have been installed"
sleep 60; echo "+++ 14 mins to go"
sleep 60; echo "+++ 13 mins to go"
sleep 60; echo "+++ 12 mins to go"
sleep 60; echo "+++ 11 mins to go"
sleep 60; echo "+++ 10 mins to go"
sleep 60; echo "+++ 9 mins to go"
sleep 60; echo "+++ 8 mins to go"
sleep 60; echo "+++ 7 mins to go"
sleep 60; echo "+++ 6 mins to go"
sleep 60; echo "+++ 5 mins to go"
sleep 60; echo "+++ 4 mins to go"
sleep 60; echo "+++ 3 mins to go"
sleep 60; echo "+++ 2 mins to go"
sleep 60; echo "+++ 1 minute to go!"
sleep 60

if [[ ! -d $LECFG ]]; then
    echo "+++ Installing dehydrated to manage LetsEncrypt SSL certificates"
    git clone --depth 1 https://github.com/lukas2511/dehydrated.git $LECFG
    chmod +x $LECFG/dehydrated
    [[ ! -d $LECFG/hooks ]] && mkdir $LECFG/hooks
    [[ ! -d $LECFG/nginx ]] && mkdir $LECFG/nginx
    git clone --depth 1 https://github.com/ttalle/dehydrated-vultr-hook.git $LECFG/hooks/vultr
    sed -i "s;/etc/;$HOME/;" $LECFG/hooks/vultr/vultr-hook.sh
#    git clone --depth 1 https://github.com/sineverba/cfhookbash.git $LECFG/hooks/cloudflare
#    git clone --depth 1 https://github.com/silkeh/pdns_api.sh.git $LECFG/hooks/pdns
fi

cd $LECFG

[[ ! -f vultr.inc ]] && \
    echo "APIKEY=$VULTR_API_KEY" > vultr.inc

[[ ! -f accounts/*/account_key.pem ]] && \
    ./dehydrated --register --accept-terms > /dev/null 2>&1

echo "+++ Install or update LetsEncrypt SSL certificates for $DNAME"
./dehydrated -c -t dns-01 -k hooks/vultr/vultr-hook.sh -d $DNAME -d mail.$DNAME -d www.$DNAME -d $VHOST > /dev/null 2>&1

echo "+++ Create local SSL enabled nginx config for $DNAME"
cat << EOS > $LECFG/nginx/$DNAME
server {
    listen                      443 ssl http2;
    server_name                 mail.$DNAME;
    ssl_certificate             $C_SSL/$DNAME/fullchain.pem;
    ssl_certificate_key         $C_SSL/$DNAME/privkey.pem;
    return 301                  https://$DNAME\$request_uri;
}
server {
    listen                      443 ssl http2;
    server_name                 www.$DNAME;
    ssl_certificate             $C_SSL/$DNAME/fullchain.pem;
    ssl_certificate_key         $C_SSL/$DNAME/privkey.pem;
    return 301                  https://$DNAME\$request_uri;
}
server {
    listen                      443 ssl http2;
    server_name                 $VHOST;
    set                         \$domain $VHOST;
    include                     $C_WEB/hcp.conf;
    include                     $C_WEB/common.conf;
    ssl_certificate             $C_SSL/$DNAME/fullchain.pem;
    ssl_certificate_key         $C_SSL/$DNAME/privkey.pem;
    ssl_trusted_certificate     $C_SSL/$DNAME/chain.pem;
}
server {
    listen                      443 ssl http2;
    server_name                 $DNAME;
    set                         \$domain $DNAME;
    include                     $C_WEB/common.conf;
    ssl_certificate             $C_SSL/$DNAME/fullchain.pem;
    ssl_certificate_key         $C_SSL/$DNAME/privkey.pem;
    ssl_trusted_certificate     $C_SSL/$DNAME/chain.pem;
}
EOS

# TODO remove the need for this by not installing a self-signed certificate in the first place?
$DOSSH $IP4_0 "bash -c \"[[ -f $C_WEB/sites-enabled/$VHOST.selfsigned ]] && rm $C_WEB/sites-enabled/$VHOST.selfsigned\""

echo "+++ Upload SSL certificates to $IP4_0"
rsync -q -e "$DOSSH" -a $LECFG/certs/$DNAME/ $IP4_0:$C_SSL/$DNAME

echo "+++ Upload nginx SSL config to $IP4_0"
rsync -q -e "$DOSSH" $LECFG/nginx/$DNAME $IP4_0:$C_WEB/sites-enabled/$DNAME

echo "+++ Add and create DKIM record for $DNAME"
DKIM=$($DOSSH $IP4_0 ". .shrc; dkim add $DNAME; dkim show $DNAME"|grep "v=DKIM1")
vultr dns record create -d $DNAME -n mail._domainkey -t TXT -D "\"$DKIM\""

echo "+++ Make sure postfix has current host details"
$DOSSH $IP4_0 "cp /etc/hosts /var/spool/postfix/etc/; cp /etc/resolv.conf /var/spool/postfix/etc/"

echo "+++ Restart web, mail and related services"
$DOSSH $IP4_0 ". .shrc; serva restart all"

echo "+++ Update SOA record"
curl -s -H "API-Key: $VULTR_API_KEY" \
 https://api.vultr.com/v1/dns/soa_update \
 --data "domain=$DNAME" \
 --data "nsprimary=ns1.$DNAME" \
 --data "email=admin@$DNAME"

echo "+++ Enable DNSSEC"
# It seems dnssec is not part of the vultr binary, have to make raw API calls
curl -s -H "API-Key: $VULTR_API_KEY" \
 https://api.vultr.com/v1/dns/dnssec_enable \
 --data "domain=$DNAME" \
 --data "enable=yes"

echo "+++ Add DNSSEC DS records"
curl -s -H "API-Key: $VULTR_API_KEY" \
 https://api.vultr.com/v1/dns/dnssec_info?domain=$DNAME | \
 jq . | grep DS | awk '{print $4" "$5" "$6" "$7}' | tr -d '",' | \
 while read DS; do swdsadd $DNAME $DS; done

echo "+++ Setup vanity nameservers"
swreghostadd $DNAME ns1.$DNAME $NS1IP
swreghostadd $DNAME ns2.$DNAME $NS2IP
swchangens $DNAME ns1.$DNAME ns2.$DNAME

echo "+++ SSH to $IP4_0 and confirm setup is finished via 'tail -f /tmp/firstboot.log'"
$DOSSH $IP4_0
